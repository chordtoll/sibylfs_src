########################################################################
# more lem targets

only_lem : $(DOTLEM)

lem_all: lem_ocaml lem_hol lem_latex

# lem_ocaml: FORCE $(DOTLEM)
# 	$(LEM) $(LEMFLAGS) -ocaml $(DOTLEM)
# 	sed -i -e "s/let >>= = bind/let (>>=) = bind/" t_fs_spec.ml # fix lem bug
# 	sed -i -e "s/let <|||> = /let (<|||>) = /" t_fs_spec.ml # fix lem bug
# 	sed -i -e "s/let |||> = /let (|||>) = /" t_fs_spec.ml # fix lem bug
# 	sed -i -e "s/let ||| = /let (|||) = /" t_fs_spec.ml # fix lem bug
# 	ocamlbuild -libs nums,bigarray -I lemdir/ocaml-lib t_fs_spec.byte t_dir_heap.byte # check they compile

lem_ocaml_test: FORCE 
	ocamlbuild -libs nums,bigarray -I lemdir/ocaml-lib $(patsubst %.ml, %.byte, $(wildcard *Auxiliary.ml))
	$(foreach command, $(wildcard *Auxiliary.byte), ./$(command))

lem_latex: FORCE $(DOTLEM)
	$(LEM) $(LEMFLAGS) -tex $(DOTLEM)

lem_hol: FORCE $(DOTLEM)
	$(LEM) $(LEMFLAGS) -hol -hol_remove_matches -outdir . $(DOTLEM) # don't export by default; use outdir ../hol to update files in ../hol
	sed -i -e "s/x$$y$$//g" t_fs_specScript.sml # hack lem module elision
	sed -i -e "s/Hol_defn/fsLib\.Hol_defn_autoschema/g" t_fs_specScript.sml # hack recursive funs
	patch t_fs_specScript.sml < t_fs_specScript.patch # patch up >>= defn

lem_hol_copy: FORCE
	rsync --checksum --exclude=*Auxiliary.thy -v $(DOTLEM:.lem=Script.sml) ../fs_proof/hol

lem_isa: FORCE $(DOTLEM)
	@$(LEM) $(LEMFLAGS) -isa -outdir . $(DOTLEM) # don't export by default; use outdir ../hol to update files in ../hol
	@patch -s T_fs_spec.thy < T_fs_spec.patch

lem_isa_copy: FORCE
	@rsync --checksum --exclude=*Auxiliary.thy -L -v *.thy ../fs_proof/isabelle
	@make -C ../fs_proof/isabelle prepare_auxiliary # copy auxilary files as well

lem_pure: FORCE $(DOTLEM)
	$(LEM) $(LEMFLAGS) -ident $(DOTLEM) # don't export by default; use outdir ../hol to update files in ../hol

# build without dragging in any unexpected dependencies
simple: FORCE
	ocamlc bigarray.cma list_array.ml fs_prelude.ml fs_spec.ml #dynarray.ml

